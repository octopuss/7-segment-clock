/************************/
/**** BASIC SETTINGS ****/
/************************/

// WIFI
const char *hostname = "clock-small.lan";

//// Clock
uint8_t clockColorMode = 1;                        // 0 => SOLID, 1 => PALETTE, (2 => STATIC_PALETTE - To-Do)
CRGB clockColorSolid = CRGB::Green;                // SOLID mode only: All available predefined colors: https://github.com/FastLED/FastLED/wiki/Pixel-reference#predefined-colors-list
CRGBPalette16 clockColorPalette = RainbowColors_p; // PALETTE mode only: Predefined palette to use (RainbowColors_p, CloudColors_p, LavaColors_p, OceanColors_p, ForestColors_p)
uint8_t clockColorCharBlend = 5;                   // PALETTE mode only: Blend single characters by amount n (0-255) | 0 => disabled, >0 amount of change
TBlendType clockColorBlending = LINEARBLEND;       // PALETTE mode only: options are LINEARBLEND or NOBLEND - linear is 'cleaner'
uint8_t clockSecIndicatorDiff = 32;                // How much to darken down the second indicator when toggling (0-255) | 0 => Disabled

const uint8_t ledsPerSegment = 1;
const uint8_t totalCharacters = 4;                 // w/o the colons
const uint8_t segmentsPerCharacter = 7;
const uint8_t NUM_LEDS = (ledsPerSegment * segmentsPerCharacter * totalCharacters  ) + 2;

char *timezone="CET-1CEST,M3.5.0,M10.5.0/3"; //can be obtained using https://rainmaker.espressif.com/docs/time-service.html

uint8_t owmTempEnabled = 1;     // Show temperature | 0 => No, 1 => Yes
uint8_t owmTempDisplayTime = 5; // Show temperature for n seconds

//// Open Weather Map (EXPERIMENTAL)
String owmApiServer = "api.openweathermap.org";        // FQDN of API server (normally no need to change it)
String owmApiKey = "<YOUR API KEY>"; // You OWA API key. Get a free one from https://openweathermap.org/price
String owmLocation = "<Your city,Country code>";                    // The location to get weather data from. API docs: https://openweathermap.org/current#name
String owmUnits = "metric";                            // "metric" or "imperial" | If switched to imperial, also chnage the owmTempMin/Max values below in the advanced section (values are limited to two digits, so f.ex. 99°F (~ 37°C) is the maximum possible to show
// OWM Temperature (EXPERIMENTAL)

/// HAS NTC 10K connected
uint8_t ntcTempEnabled = 0;                 // Show room temperature | 0 => No, 1 => Yes
#define ntcResistanceNominal 10000 // resistance at 25 degrees C in ohms
#define ntcTempNominal 25          // temp. for nominal resistance (almost always 25 C)
#define ntcBCoefficient 3950       // The beta coefficient of the thermistor (usually 3000-4000)
#define ntcSeriesResistor 10000    // the value of the 'other' resistor
#define ntcPin A0
const uint8_t ntcAveragedReadingsCount = 5; // how many samples to take and average, more takes longer, but is more 'smooth'
int8_t ntcTempMin = -5;                     // Min temperature (-99 is min possibl. Value and lower temperature will be shown in blue and fades torwards red if warmer)
int8_t ntcTempMax = 30;
String ntcUnits = "metric";
uint8_t ntcTempDisplayTime = 5; // Show temperature for n seconds
float ntcTempCompensation = -2; // readings might be off a little
char *ntcTempSchedule = "35 * * * * *"; // When should the temperature be shown in "extended" cron format (see below)

//// FastLED
uint8_t ledBrightness = 130; // Maximum brightness (0-255)
uint8_t nightLedBrightness = 20;
uint8_t nightStartHour = 21;
uint8_t nightEndHour = 7;


//// Open Weather Map (EXPERIMENTAL)
int8_t owmTempMin = -10;                // Min temperature (-99 is min possibl. Value and lower temperature will be shown in blue and fades torwards red if warmer)
int8_t owmTempMax = 44;                 // Max temperature (99 is max possible. Value and higher temperature will be shown in red and fades torwards blue if colder)
char *owmTempSchedule = "30 * * * * *"; // When should the temperature be shown in "extended" cron format (see below)

//// FastLED
#define LED_PIN D3 // LED data pin to use on ESP
#define LED_TYPE WS2812

//// Schedules
// The schedules use an "extended" cron syntax with an addiational seconds field
// <sec> <min> <hour> <day> <month> <day of week>
// Cron docs: https://en.wikipedia.org/wiki/Cron#Overview
char *clockUpdateSchedule = "* * * * * *"; // When to update clock. Default: Every second (SHOULD NOT be changed)
char *owmUpdateSchedule = "0 5 * * * *";   // When to update weather data. Default: 5 past every hour (the free OWM only updaes once every full hour)